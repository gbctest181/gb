{% extends 'base.html.twig' %}

{% block title %}PROCES VERBAl{% endblock %}

{% block body %}
    {#_________Header___________#}
    <header class="jumbotron-fluid table-dark text-center">
        <div class="Logo"></div>
        <div class="title">
            <h1>PROCES VERBAL</h1>
        </div>
    </header>
    {#_________Info___________#}
    <div class="container">
        <div class="row" style="border: 1px solid #0a0a0a">
            <div class="row" >
                <div class="col">
                    <br>
                    <div class="col">
                        <U>Client</U> : <b>{{intervention.fkclient.raisonSociale}}</b>
                        <br>({{ intervention.fkclient.responsable }})
                    </div>
                    <div class="col">
                       <U>Adresse :</U><br>
                        {{ intervention.fkclient.adresse }}
                    </div>
                    <div class="col">
                        {{ intervention.fkclient.codepostal }} {{ intervention.fkclient.ville }}
                    </div>
                </div>
                <div class="col">
                    <br>
                    <div class="col">
                       <U>Telephone :</U> {{ intervention.fkclient.telephone }}
                    </div>
                    <div class="col">
                        <U>Mobile :</U>  {{ intervention.fkclient.mobile }}
                    </div>
                    <div class="col">
                       <U>Fax : </U>  {{ intervention.fkclient.fax }}
                    </div>
                    <div class="col">
                       <U>E-mail :</U>  {{ intervention.fkclient.email }}
                    </div>
                    <br>
                </div>
            </div>
            <div class="row" style="border-left: 1px solid #0a0a0a" >
                <div class="col">
                    <br>
                    <div class="col">
                        <U>Client :</U> {{ intervention.nom }}
                    </div>
                    <div class="col">
                        <U>Adresse du chantier :</U> <br>
                        {{ intervention.adresse }}
                    </div>
                    <div class="col">
                        {{ intervention.codepostal }} {{ intervention.ville }}
                    </div>
                    <div class="col"><!--Données récupérées de l'API-->
                        <U>Objet du marché :</U>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {#_________Proces verbal___________#}
    <div class="container">
        <br>
        <div class="clauses">
                <p>Le clients atteste, par le présent, que les matériels livrés et installés par GB CONCEPT :</p>
                <p> <span>&#128073;&#127996;</span>sont conformes aux caractéristiques indiquées dans les documents précisés en référence.</p>
                <p><span>&#128073;&#127996;</span> sont en bon état de fonctionnement.</p>
                <p><b><U>Rappel</U> : Les matériels fournis ce jour demeurent la propriété exclusive de l'entreprise GB CONCEPT jusqu'au paiement complet des matériels et prestations par le client.</b></p>
                <p> <b><U>Responsabilité :</U></b> A compter de ce jour, le client assure l'entière responsabilité des matériels, y compris l'ensemble des obligations d'assurance.</p>
        </div>
    </div><!--Clauses-->
    <div class="container">
        <div class="row">
            <div class="form-check ">
                <label for="observation"> Observations </label>
                <input class="form-check-label" type="checkbox" name="observation" id="observation"  >
            </div>
            <div class="form-group col-6" id="obsTech" style="display: none" >
                <label for="obs"></label>
                <textarea class="form-control" rows="3"  id="obs" placeholder="Observations  :"></textarea>
            </div>
        </div>
    </div><!--Observations-->
    <div class="container " style="border: 1px solid #0a0a0a">
        <div class="row">
            <div class="col"></div>
            <div class="col-3">
                <h4>GB CONCEPT</h4>
                Nom : nom du technicien{#{{ user.username }}#}
                <div class="Signature">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <canvas id="sig-canvasT" width="250" height="100" style=" border: 2px dotted #CCCCCC; border-radius: 15px; cursor: crosshair; ">
                                </canvas>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <button class="btn btn-primary" id="sig-submitBtnT">Ok</button>
                                <button class="btn btn-default" id="sig-clearBtnT">Effacer</button>
                            </div>
                        </div>
                    </div><!--SIGNATURE -->
                </div>
            </div>
            <div class="col"></div>
            <div class="col-3">
                Établi le {{ "now"|date("d/m/Y") }}
                <br>
                <button type="submit" class="btn btn-success">Envoyer</button>
            </div>
            <div class="col"></div>
            <div class="col-3">
                <h4>LE CLIENT</h4>
                Nom : {{ intervention.nom }}
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                            <canvas id="sig-canvasC" width="250" height="100" style=" border: 2px dotted #CCCCCC; border-radius: 15px; cursor: crosshair; ">
                            </canvas>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <button class="btn btn-primary" id="sig-submitBtnC">Ok</button>
                            <button class="btn btn-default" id="sig-clearBtnC">Effacer</button>
                        </div>
                    </div>
                </div><!--SIGNATURE -->
            </div>
        </div>

    </div><!--Accord-->
    <div class="retour">
        <button type="button" class="btn btn-danger"><a href="javascript:history.go(-1)">Retour</a></button>
    </div><!--Bouton retour-->
    {#_________Footer___________#}
    <footer class="jumbotron-fluid table-dark" id="footer">
        <div class="row">
            <div class="col-3">
                <div class="fblock-1"><a href="./"><img src="{{ asset('/public/images/logo.jpg') }}" alt="" ></a></div>
            </div>
            <div class="preffix_2 col-6">
                <div class="fblock-2">
                    <div class="fblock-2_s1">
                        <span class="fblock-2_s1_s1">GB CONCEPT</span>
                        &copy; <span id="copyright-year"></span>
                        | Mentions Légales</div>
                    <p>SARL GB CONCEPT-181, Rue de St Éxupéry-34130 MAUGUIO.</p>
                    <p>Tél: 04.20.30.28.28/ Fax: 04.67.82.75.38 Email: contact@gbconcept34.fr - RCS Montpellier 501 826 176</p>
                </div>
            </div>
        </div>
    </footer>
    {#_________Script___________#}
    <script>
        (function() {
            window.requestAnimFrame = (function(callback) {
                return window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimaitonFrame ||
                    function(callback) {
                        window.setTimeout(callback, 1000 / 60);
                    };
            })();
            const canvasTech = document.getElementById("sig-canvasT");
            const ctxTech = canvasTech.getContext("2d");
            ctxTech.strokeStyle = "#222222";
            ctxTech.lineWidth = 1;

            let drawing = false;
            let mousePos = {
                x: 0,
                y: 0
            };
            let lastPos = mousePos;

            canvasTech.addEventListener("mousedown", function(e) {
                drawing = true;
                lastPos = getMousePos(canvasTech, e);
            }, false);

            canvasTech.addEventListener("mouseup", function(e) {
                drawing = false;
            }, false);

            canvasTech.addEventListener("mousemove", function(e) {
                mousePos = getMousePos(canvasTech, e);
            }, false);

            // Ajouter un support d'événement tactile pour mobile
            canvasTech.addEventListener("touchstart", function(e) {
            }, false);

            canvasTech.addEventListener("touchmove", function(e) {
                const touch = e.touches[0];
                const me = new MouseEvent("mousemove", {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvasTech.dispatchEvent(me);
            }, false);

            canvasTech.addEventListener("touchstart", function(e) {
                mousePos = getTouchPos(canvasTech, e);
                const touch = e.touches[0];
                const me = new MouseEvent("mousedown", {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvasTech.dispatchEvent(me);
            }, false);

            canvasTech.addEventListener("touchend", function(e) {
                const me = new MouseEvent("mouseup", {});
                canvasTech.dispatchEvent(me);
            }, false);

            function getMousePos(canvasDom, mouseEvent) {
                const rect = canvasDom.getBoundingClientRect();
                return {
                    x: mouseEvent.clientX - rect.left,
                    y: mouseEvent.clientY - rect.top
                }
            }

            function getTouchPos(canvasDom, touchEvent) {
                const rect = canvasDom.getBoundingClientRect();
                return {
                    x: touchEvent.touches[0].clientX - rect.left,
                    y: touchEvent.touches[0].clientY - rect.top
                }
            }

            function renderCanvas() {
                if (drawing) {
                    ctxTech.moveTo(lastPos.x, lastPos.y);
                    ctxTech.lineTo(mousePos.x, mousePos.y);
                    ctxTech.stroke();
                    lastPos = mousePos;
                }
            }

            // Empêcher le défilement lorsque vous touchez la zone de signature
            document.body.addEventListener("touchstart", function(e) {
                if (e.target === canvasTech) {
                    e.preventDefault();
                }
            }, false);
            document.body.addEventListener("touchend", function(e) {
                if (e.target === canvasTech) {
                    e.preventDefault();
                }
            }, false);
            document.body.addEventListener("touchmove", function(e) {
                if (e.target === canvasTech) {
                    e.preventDefault();
                }
            }, false);

            (function drawLoop() {
                requestAnimFrame(drawLoop);
                renderCanvas();
            })();

            function clearCanvas() {
                canvasTech.width = canvasTech.width;
            }

            // Configurer l'interface utilisateur
            const sigTextT = document.getElementById("sig-dataUrlT");
            const sigImageT = document.getElementById("sig-imageT");
            const clearBtnT = document.getElementById("sig-clearBtnT");
            const submitBtnT = document.getElementById("sig-submitBtnT");
            clearBtnT.addEventListener("click", function(e) {
                clearCanvas();
                sigTextT.innerHTML = "L'URL des données pour votre signature ira ici!";
                sigImageT.setAttribute("src", "");
            }, false);
            submitBtnT.addEventListener("click", function(e) {
                const dataUrlT = canvasTech.toDataURL();
                //  sigTextT.innerHTML = dataUrlT;           lien image pour la signature
                //  sigImageT.setAttribute("src", dataUrl);
            }, false);
        })();
        {#                            <br/>#}
        {#                            <div class="row">#}
        {#                                <div class="col-md-12">#}
        {#                                    <textarea id="sig-dataUrlT" class="form-control" rows="5">L'URL de données pour votre signature ira ici!</textarea>#}
        {#                                </div>#}
        {#                            </div>#}
        {#                            <br/>#}
        {#                            <div class="row">#}
        {#                                <div class="col-md-12">#}
        {#                                    <img id="sig-imageT" src="" alt="Your signature will go here!"/>#}
        {#                                </div>#}
        {#                            </div>#}
        {#                     </div>#}
        {#                        #}

    </script><!--SIGNATURE Technicien-->
    <script>
        (function() {
            window.requestAnimFrame = (function(callback) {
                return window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimaitonFrame ||
                    function(callback) {
                        window.setTimeout(callback, 1000 / 60);
                    };
            })();
            const canvasCl = document.getElementById("sig-canvasC");
            const  ctxCl = canvasCl.getContext("2d");
            ctxCl.strokeStyle = "#222222";
            ctxCl.lineWidth = 1;

            let drawing = false;
            let mousePos = {
                x: 0,
                y: 0
            };
            let lastPos = mousePos;

            canvasCl.addEventListener("mousedown", function(e) {
                drawing = true;
                lastPos = getMousePos(canvasCl, e);
            }, false);

            canvasCl.addEventListener("mouseup", function(e) {
                drawing = false;
            }, false);

            canvasCl.addEventListener("mousemove", function(e) {
                mousePos = getMousePos(canvasCl, e);
            }, false);

            // Ajouter un support d'événement tactile pour mobile
            canvasCl.addEventListener("touchstart", function(e) {
            }, false);

            canvasCl.addEventListener("touchmove", function(e) {
                const touch = e.touches[0];
                const me = new MouseEvent("mousemove", {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvasCl.dispatchEvent(me);
            }, false);

            canvasCl.addEventListener("touchstart", function(e) {
                mousePos = getTouchPos(canvasCl, e);
                const touch = e.touches[0];
                const me = new MouseEvent("mousedown", {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvasCl.dispatchEvent(me);
            }, false);

            canvasCl.addEventListener("touchend", function(e) {
                const me = new MouseEvent("mouseup", {});
                canvasCl.dispatchEvent(me);
            }, false);

            function getMousePos(canvasDom, mouseEvent) {
                const rect = canvasDom.getBoundingClientRect();
                return {
                    x: mouseEvent.clientX - rect.left,
                    y: mouseEvent.clientY - rect.top
                }
            }

            function getTouchPos(canvasDom, touchEvent) {
                const rect = canvasDom.getBoundingClientRect();
                return {
                    x: touchEvent.touches[0].clientX - rect.left,
                    y: touchEvent.touches[0].clientY - rect.top
                }
            }

            function renderCanvas() {
                if (drawing) {
                    ctxCl.moveTo(lastPos.x, lastPos.y);
                    ctxCl.lineTo(mousePos.x, mousePos.y);
                    ctxCl.stroke();
                    lastPos = mousePos;
                }
            }

            // Empêcher le défilement lorsque vous touchez la zone de signature
            document.body.addEventListener("touchstart", function(e) {
                if (e.target === canvasCl) {
                    e.preventDefault();
                }
            }, false);
            document.body.addEventListener("touchend", function(e) {
                if (e.target === canvasCl) {
                    e.preventDefault();
                }
            }, false);
            document.body.addEventListener("touchmove", function(e) {
                if (e.target === canvasCl) {
                    e.preventDefault();
                }
            }, false);

            (function drawLoop() {
                requestAnimFrame(drawLoop);
                renderCanvas();
            })();

            function clearCanvas() {
                canvasCl.width = canvasCl.width;
            }

            // Configurer l'interface utilisateur
            const sigTextC = document.getElementById("sig-dataUrlC");
            const sigImageC = document.getElementById("sig-imageC");
            const clearBtnC = document.getElementById("sig-clearBtnC");
            const submitBtnC = document.getElementById("sig-submitBtnC");
            clearBtnC.addEventListener("click", function(e) {
                clearCanvas();
                sigTextC.innerHTML = "L'URL des données pour votre signature ira ici!";
                sigImageC.setAttribute("src", "");
            }, false);
            submitBtnC.addEventListener("click", function(e) {
                const dataUrlC = canvasCl.toDataURL();
                //  sigTextC.innerHTML = dataUrlC;           lien image pour la signature
                //  sigImageC.setAttribute("src", dataUrl);
            }, false);
        })();
    </script><!--SIGNATURE Client-->
    <script>
        $('#observation').change(function () {
            {
                if (this.checked) {
                    document.querySelector('#obsTech').style.display = 'block';
                } else if(!this.checked) {
                    document.querySelector('#obsTech').style.display = 'none';
                }
            }
        })
    </script><!--Obsvervation-->
{% endblock %}
